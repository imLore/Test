package me.mrCookieSlime.EmeraldEnchants;

import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import me.mrCookieSlime.CSCoreLib.Configuration.ConfigSetup;
import me.mrCookieSlime.CSCoreLib.Configuration.ReloadableConfig;
import me.mrCookieSlime.CSCoreLib.general.Server.Plugins;
import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.Effect;
import org.bukkit.Location;
import org.bukkit.Material;
import org.bukkit.Server;
import org.bukkit.World;
import org.bukkit.block.Block;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.EventPriority;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.meta.ItemMeta;
import org.bukkit.plugin.PluginManager;
import org.bukkit.plugin.java.JavaPlugin;
import org.bukkit.potion.PotionEffect;
import org.bukkit.potion.PotionEffectType;
import org.bukkit.scheduler.BukkitScheduler;

public class main
  extends JavaPlugin
  implements Listener
{
  static ReloadableConfig cfg;
  Set<UUID> mining;
  boolean prisonutils = false;
  
  public void onEnable()
  {
    Plugins.load(this);
    ConfigSetup.setup(this);
    cfg = new ReloadableConfig(this);
    this.mining = new HashSet();
    for (int i = 0; i < 1000; i++)
    {
      if (!cfg.contains("custom-enchantments." + i)) {
        break;
      }
      new CustomEnchantment(i);
    }
    getServer().getPluginManager().registerEvents(this, this);
    
    getServer().getScheduler().runTaskTimer(this, new Runnable()
    {
      public void run()
      {
        label244:
        for (Player p : ) {
          if ((p.getItemInHand() != null) && (p.getItemInHand().hasItemMeta()) && (p.getItemInHand().getItemMeta().hasLore()))
          {
            Iterator localIterator2;
            for (Iterator localIterator1 = p.getItemInHand().getItemMeta().getLore().iterator(); localIterator1.hasNext(); localIterator2.hasNext())
            {
              String line = (String)localIterator1.next();
              if ((!line.contains(" ")) || 
                (!CustomEnchantment.names.contains(ChatColor.stripColor(line.split(" ")[0])))) {
                break label244;
              }
              CustomEnchantment enchant = (CustomEnchantment)CustomEnchantment.map.get(ChatColor.stripColor(line.split(" ")[0]));
              int level = RomanNumberConverter.convertRoman(ChatColor.stripColor(line.split(" ")[1]));
              localIterator2 = enchant.getEffects().iterator(); continue;PotionEffectType effect = (PotionEffectType)localIterator2.next();
              if (p.hasPotionEffect(effect)) {
                p.removePotionEffect(effect);
              }
              p.addPotionEffect(new PotionEffect(effect, 600, level));
            }
          }
        }
      }
    }, 0L, 200L);
    
    this.prisonutils = Bukkit.getPluginManager().isPluginEnabled("PrisonUtils");
  }
  
  @EventHandler(priority=EventPriority.MONITOR, ignoreCancelled=true)
  public void onMine(BlockBreakEvent e)
  {
    if ((!this.mining.contains(e.getPlayer().getUniqueId())) && (e.getPlayer().getItemInHand() != null) && (e.getPlayer().getItemInHand().hasItemMeta()) && (e.getPlayer().getItemInHand().getItemMeta().hasLore())) {
      for (String line : e.getPlayer().getItemInHand().getItemMeta().getLore()) {
        if (CustomEnchantment.names.contains(ChatColor.stripColor(line.split(" ")[0])))
        {
          CustomEnchantment enchant = (CustomEnchantment)CustomEnchantment.map.get(ChatColor.stripColor(line.split(" ")[0]));
          if (enchant.isExplosive())
          {
            int level = RomanNumberConverter.convertRoman(ChatColor.stripColor(line.split(" ")[1]));
            int radius = level / 30;
            e.getPlayer().getWorld().createExplosion(e.getBlock().getLocation(), 0.0F);
            this.mining.add(e.getPlayer().getUniqueId());
            Set<Location> blocks = new HashSet();
            for (int x = e.getBlock().getX() - radius; x < e.getBlock().getX() + radius; x++) {
              for (int y = e.getBlock().getY() - radius; y < e.getBlock().getY() + radius; y++) {
                for (int z = e.getBlock().getZ() - radius; z < e.getBlock().getZ() + radius; z++)
                {
                  Block block = e.getBlock().getWorld().getBlockAt(x, y, z);
                  if ((block.getType() != null) && (block.getType() != Material.AIR) && (!blocks.contains(block.getLocation())))
                  {
                    blocks.add(block.getLocation());
                    block.getWorld().playEffect(block.getLocation(), Effect.STEP_SOUND, block.getType());
                    BlockBreakEvent event = new BlockBreakEvent(block, e.getPlayer());
                    Bukkit.getPluginManager().callEvent(event);
                    if (!event.isCancelled()) {
                      block.breakNaturally();
                    }
                  }
                }
              }
            }
            this.mining.remove(e.getPlayer().getUniqueId());
          }
        }
      }
    }
  }
  
  public void onDisable()
  {
    Plugins.unload(this);
    this.mining = null;
    cfg = null;
    CustomEnchantment.list = null;
    CustomEnchantment.map = null;
    CustomEnchantment.names = null;
  }
}
